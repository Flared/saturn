[tool.poetry]
name = "saturn-engine"
version = "0.3.1dev112"
description = ""
readme = "README.md"
authors = ["Flare Systems <oss@flare.systems>"]
repository = "https://github.com/Flared/saturn"
keywords = ["data", "collection", "task", "worker", "processing"]
classifiers = [
  "Intended Audience :: Information Technology",
  "Intended Audience :: Developers",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.9",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Topic :: System :: Distributed Computing",
]
license = "BSD-3-Clause"
packages = [
    { include = "saturn_engine", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.9"
SQLAlchemy = {extras = ["mypy"], version = "^1.4.29"}
aiosqlite = "^0.17.0"
marshmallow = "^3.13.0"
desert = ">=2020.11.18"
asyncstdlib = "^3.10.2"
aio-pika = "^7.1"
####################
## worker-manager ##
####################
Flask = {version = "^2.0.2", optional = true }
PyYAML = "^6.0"
types-PyYAML = "^6.0.0"
aiohttp = {extras = ["speedups"], version = "^3.8.0"}
croniter = "^1.0.15"
types-croniter = "^1.0.3"
marshmallow-enum = "^1.5.1"
ray = {version = "^1.11", optional = true}
click = "^8.0.3"
aiodogstatsd = {version = "^0.16.0", optional = true}
structlog = ">=21.5.0"
sentry-sdk = "^1.5.3"
arq = {version = "^0.22", optional = true}
limits = {version = "^2.7.0"}
opentelemetry-api = "^1.13.0"
opentelemetry-sdk = {version = "^1.13.0", optional = true}

[tool.poetry.extras]
worker-manager = [
  "Flask",
]
ray = [
  "ray",
]
arq = [
  "arq"
]
statsd = [
  "aiodogstatsd",
]
structlog = [
  "structlog",
]
sentry = [
  "sentry-sdk",
]
tracer = [
  "opentelemetry-sdk",
]

[tool.poetry.dev-dependencies]
black = "*"
flake8 = "*"
flake8-bandit = "*"
flake8-black = "*"
flake8-bugbear = "*"
flake8-breakpoint = "*"
flake8-isort = "*"
isort = "*"
mypy = "*"
mypy-typing-asserts = "*"
pytest = "*"
nox-poetry = "*"
pytest-asyncio = "*"
pytest-icdiff = "*"
pytest-mock = "*"
freezegun = "*"
types-freezegun = "*"
autoflake8 = "*"

[tool.pytest.ini_options]
asyncio_mode = "auto"
addopts = '''
  --doctest-modules
  --doctest-ignore-import-errors
'''
filterwarnings = [
  "error",
  "ignore:distutils Version classes are deprecated.:DeprecationWarning",
  "ignore::marshmallow.warnings.RemovedInMarshmallow4Warning",
  "ignore:.*/tmp/ray/.*:ResourceWarning",
  "ignore:.*You should use InstrumentationScope.*:DeprecationWarning",
]

[tool.isort]
profile = "black"
force_single_line = true
known_typing_library = '''
    typing,
    typing_extensions,
'''
sections = '''
    FUTURE,
    TYPING_LIBRARY,
    STDLIB,
    THIRDPARTY,
    FIRSTPARTY,
    LOCALFOLDER
'''

[build-system]
requires = ["poetry_core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
mypy_path = ["src", "mypy_stubs"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_calls = true
namespace_packages = true
plugins = ["sqlalchemy.ext.mypy.plugin", "mypy_typing_asserts.mypy_plugin"]

[[tool.mypy.overrides]]
module = [
  "nox.*",
  "nox_poetry.*",
]
ignore_missing_imports = true
